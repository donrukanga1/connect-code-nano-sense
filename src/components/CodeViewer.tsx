
import { useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Copy, Download, FileCode } from "lucide-react";
import { toast } from "sonner";
import Prism from "prismjs";
import "prismjs/themes/prism-dark.css";

// Import C language first as Arduino is based on C
import "prismjs/components/prism-c";
// Then import Arduino component
import "prismjs/components/prism-arduino";

interface CodeViewerProps {
  code: string;
}

const LIBRARY_MAP: Record<string, string> = {
  imu: "Arduino_LSM6DS3.h", // Updated to LSM6DS3 for Nano 33 BLE Sense Rev2
  microphone: "PDM.h",
  temperature: "Arduino_HTS221.h",
  pressure: "Arduino_LPS22HB.h",
  led: "", // No library needed
};

export const CodeViewer = ({ code }: CodeViewerProps) => {
  const handleCopyCode = async () => {
    try {
      await navigator.clipboard.writeText(formattedCode);
      toast.success("Code copied to clipboard!");
    } catch (error) {
      toast.error("Failed to copy code");
      console.error("Copy error:", error);
    }
  };

  const handleDownloadCode = () => {
    if (!formattedCode.trim()) {
      toast.error("No code to download");
      return;
    }

    const blob = new Blob([formattedCode], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "arduino_sketch.ino";
    a.click();
    URL.revokeObjectURL(url);
    toast.success("Code downloaded as arduino_sketch.ino");
  };

  const formatArduinoCode = (rawCode: string): string => {
    if (!rawCode.trim()) {
      return `// Arduino Sketch
// Add blocks to generate code

void setup() {
  // Initialization code goes here
}

void loop() {
  // Main program code goes here
}`;
    }

    // Detect used components from code
    const usedComponents = Object.keys(LIBRARY_MAP).filter((comp) =>
      rawCode.toLowerCase().includes(comp)
    );

    // Generate library includes
    const includes = usedComponents
      .map((comp) => LIBRARY_MAP[comp])
      .filter(Boolean)
      .map((lib) => `#include <${lib}>`)
      .join("\n");

    // Basic code validation
    let warnings = "";
    if (!rawCode.includes("setup()")) {
      warnings = "// Warning: No setup() function found\n";
    }
    if (!rawCode.includes("loop()")) {
      warnings += "// Warning: No loop() function found\n";
    }

    // Format code with comments
    let formattedCode = `// Arduino Sketch for Nano 33 BLE Sense Rev2
// Generated by Arduino Blockly Studio
${includes ? `\n${includes}` : ""}

${warnings}${rawCode}`;

    // Normalize indentation
    formattedCode = formattedCode
      .split("\n")
      .map((line) => line.trimEnd())
      .join("\n");

    return formattedCode;
  };

  const formattedCode = useMemo(() => formatArduinoCode(code), [code]);

  const highlightedCode = useMemo(() => {
    try {
      // Use 'cpp' as fallback if Arduino language isn't available
      const language = Prism.languages.arduino || Prism.languages.cpp || Prism.languages.c;
      if (language) {
        return Prism.highlight(formattedCode, language, "arduino");
      }
      return formattedCode; // Return plain text if no language available
    } catch (error) {
      console.error("Prism highlighting error:", error);
      return formattedCode; // Return plain text on error
    }
  }, [formattedCode]);

  const lineCount = useMemo(() => formattedCode.split("\n").length, [formattedCode]);

  return (
    <Card className="h-full bg-slate-900/50 border-slate-700 flex flex-col">
      <CardHeader className="flex-shrink-0 pb-3">
        <CardTitle className="flex items-center justify-between text-sm">
          <div className="flex items-center space-x-2">
            <FileCode className="w-4 h-4 text-purple-400" />
            <span className="text-white">Generated Arduino Code</span>
          </div>
          <div className="flex space-x-2">
            <Button
              onClick={handleCopyCode}
              variant="outline"
              size="sm"
              className="bg-purple-500/20 border-purple-500/30 text-purple-300 hover:bg-purple-500/30"
            >
              <Copy className="w-3 h-3 mr-1" />
              Copy
            </Button>
            <Button
              onClick={handleDownloadCode}
              variant="outline"
              size="sm"
              className="bg-blue-500/20 border-blue-500/30 text-blue-300 hover:bg-blue-500/30"
            >
              <Download className="w-3 h-3 mr-1" />
              Download
            </Button>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="flex-1 overflow-hidden p-0">
        <div className="h-full flex">
          <div className="bg-slate-800/50 text-gray-400 text-xs font-mono p-4 select-none">
            {Array.from({ length: lineCount }, (_, i) => (
              <div key={i} className="text-right pr-2">
                {i + 1}
              </div>
            ))}
          </div>
          <div className="flex-1 overflow-y-auto">
            <pre className="text-xs text-gray-300 p-4 font-mono whitespace-pre-wrap leading-relaxed">
              <code dangerouslySetInnerHTML={{ __html: highlightedCode }} />
            </pre>
          </div>
        </div>
      </CardContent>
      <div className="flex-shrink-0 p-3 bg-slate-800/30 border-t border-slate-700">
        <div className="flex items-center justify-between text-xs text-gray-400">
          <span>Lines: {lineCount}</span>
          <span>{formattedCode.trim() ? "Ready for upload" : "No code generated"}</span>
        </div>
      </div>
    </Card>
  );
};
